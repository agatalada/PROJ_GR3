#import bibliotek
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Button
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageOps
	
# Załaduj zestaw danych Fashion MNIST
fashion_mnist = tf.keras.datasets.fashion_mnist
(X_train, y_train), (X_val, y_val) = fashion_mnist.load_data()

# Normalizacja danych (zmiana zakresu pikseli z 0-255 na 0-1)
X_val = X_val.astype('float32') / 255.0

# Etykiety klas
class_names = ['T-shirt/top', 'Spodnie', 'Sweter', 'Sukienka', 'Płaszcz',
               'Sandał', 'Koszula', 'Sneaker', 'Torebka', 'Kozak/botki]

# Konwersja etykiet na one-hot encoding
y_val_one_hot = tf.keras.utils.to_categorical(y_val, len(class_names))

# Budowanie modelu MLP
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Dense

model = Sequential()
model.add(Flatten(input_shape=(28, 28)))  # Warstwa wejściowa
model.add(Dense(128, activation='relu'))  # Ukryta warstwa z 128 neuronami
model.add(Dense(10, activation='softmax'))  # Warstwa wyjściowa (10 klas)

# Kompilowanie modelu
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Trening modelu 
model.fit(X_train.astype('float32') / 255.0, 
          tf.keras.utils.to_categorical(y_train), 
          epochs=30, batch_size=256, verbose=1)

# Klasyfikacja obrazów ze zbioru walidacyjnego
y_val_pred = model.predict(X_val)

# Interaktywny system do przewijania zdjęć
class ImageViewer:
    def __init__(self, predictions, true_labels, images):
        self.predictions = predictions
        self.true_labels = true_labels
        self.images = images
        self.index = 0
        ax_upload = plt.axes([0.1, 0.05, 0.1, 0.075])
        self.btn_upload = Button(ax_upload, 'Wgraj obraz')
        self.btn_upload.on_clicked(self.upload_image)


        # Rysowanie pierwszego obrazu
        self.fig, self.ax = plt.subplots(figsize=(6, 4))
        plt.subplots_adjust(bottom=0.2)

        self.im = self.ax.imshow(self.images[self.index], cmap=plt.cm.binary)
        self.pred_text = self.ax.set_title(self._get_image_title(self.index))

        # Przyciski "Następny"
        ax_next = plt.axes([0.8, 0.05, 0.1, 0.075])
        self.btn_next = Button(ax_next, 'Następny')
        self.btn_next.on_clicked(self.next_image)

        plt.show()

 def _get_image_title(self, i):
        predicted_label = np.argmax(self.predictions[i])
        confidence = np.max(self.predictions[i]) * 100  # Wyciągnij maksymalne prawdopodobieństwo i zamień na %
        true_value = self.true_labels[i]
        return (f"Przewidywane: {class_names[predicted_label]} ({confidence:.2f}%), #miejsca po przecinku
                f"Prawdziwe: {class_names[true_value]}")

    def update_image(self):
        self.im.set_data(self.images[self.index])
        self.pred_text.set_text(self._get_image_title(self.index))
        self.fig.canvas.draw_idle()  # Odświeżanie interfejsu

    def next_image(self, event):
        self.index = (self.index + 1) % len(self.images)
        self.update_image()

    def upload_image(self, event):
        file_path = filedialog.askopenfilename(
            title="Wybierz obraz",
            filetypes=[("Obrazy", "*.png;*.jpg;*.jpeg;*.bmp")]
        )
        if file_path:
        # Wczytanie obrazu
            img = Image.open(file_path)
        # Przeskalowanie do rozmiaru 28x28 i zamiana na skalę szarości
            img = ImageOps.grayscale(img.resize((28, 28)))
        # Zamiana na tablicę numpy
            img_array = np.array(img) / 255.0  # Normalizacja do zakresu [0, 1]
        # Przewidywanie klasy
            pred = model.predict(img_array.reshape(1, 28, 28))
            predicted_label = np.argmax(pred)
            confidence = np.max(pred) * 100

        # Wyświetl wgrany obraz
            self.images = [img_array]  # Zamień aktualną listę obrazów na wgrany obraz
            self.predictions = pred  # Przewidywanie dla wgranego obrazu
            self.true_labels = [predicted_label]  # Symulacja poprawnej etykiety
            self.index = 0  # Zresetuj indeks
            self.update_image()  # Zaktualizuj interfejs

# Uruchomienie ImageViewer
viewer = ImageViewer(y_val_pred, y_val, X_val)
